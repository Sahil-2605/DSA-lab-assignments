from collections import deque

class CityTraversal:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adj_matrix = [[0] * vertices for _ in range(vertices)]
        self.adj_list = [[] for _ in range(vertices)]

    def add_edge_matrix(self, src, dest):
        self.adj_matrix[src][dest] = 1
        self.adj_matrix[dest][src] = 1

    def add_edge_list(self, src, dest):
        self.adj_list[src].append(dest)
        self.adj_list[dest].append(src)

    def dfs_util(self, v, visited):
        visited[v] = True
        print(chr(ord('A') + v), end=" ")
        for i in range(self.vertices):
            if self.adj_matrix[v][i] == 1 and not visited[i]:
                self.dfs_util(i, visited)

    def dfs(self, start):
        visited = [False] * self.vertices
        self.dfs_util(start, visited)

    def bfs(self, start):
        visited = [False] * self.vertices
        queue = deque([start])
        visited[start] = True

        while queue:
            v = queue.popleft()
            print(chr(ord('A') + v), end=" ")
            for n in self.adj_list[v]:
                if not visited[n]:
                    visited[n] = True
                    queue.append(n)

# Main part
if __name__ == "__main__":
    g = CityTraversal(5)

    # Add edges (same as Java)
    g.add_edge_matrix(0, 1)
    g.add_edge_matrix(0, 2)
    g.add_edge_matrix(1, 3)
    g.add_edge_matrix(2, 4)
    g.add_edge_matrix(3, 4)

    g.add_edge_list(0, 1)
    g.add_edge_list(0, 2)
    g.add_edge_list(1, 3)
    g.add_edge_list(2, 4)
    g.add_edge_list(3, 4)

    print("DFS traversal (using adjacency matrix):")
    g.dfs(0)

    print("\nBFS traversal (using adjacency list):")
    g.bfs(0)
