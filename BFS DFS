import java.util.*;

public class CityTraversal {
    private int vertices;
    private int[][] adjMatrix;
    private LinkedList<Integer>[] adjList;

    CityTraversal(int v) {
        vertices = v;
        adjMatrix = new int[v][v];
        adjList = new LinkedList[v];
        for (int i = 0; i < v; i++)
            adjList[i] = new LinkedList<>();
    }

    void addEdgeMatrix(int src, int dest) {
        adjMatrix[src][dest] = 1;
        adjMatrix[dest][src] = 1;
    }

    void addEdgeList(int src, int dest) {
        adjList[src].add(dest);
        adjList[dest].add(src);
    }

    void DFSUtil(int v, boolean[] visited) {
        visited[v] = true;
        System.out.print((char) ('A' + v) + " ");
        for (int i = 0; i < vertices; i++) {
            if (adjMatrix[v][i] == 1 && !visited[i])
                DFSUtil(i, visited);
        }
    }

    void DFS(int start) {
        boolean[] visited = new boolean[vertices];
        DFSUtil(start, visited);
    }

    void BFS(int start) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();
        visited[start] = true;
        queue.add(start);
        while (!queue.isEmpty()) {
            int v = queue.poll();
            System.out.print((char) ('A' + v) + " ");
            for (int n : adjList[v]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

    public static void main(String[] args) {
        CityTraversal g = new CityTraversal(5);

        g.addEdgeMatrix(0, 1);
        g.addEdgeMatrix(0, 2);
        g.addEdgeMatrix(1, 3);
        g.addEdgeMatrix(2, 4);
        g.addEdgeMatrix(3, 4);

        g.addEdgeList(0, 1);
        g.addEdgeList(0, 2);
        g.addEdgeList(1, 3);
        g.addEdgeList(2, 4);
        g.addEdgeList(3, 4);

        System.out.println("DFS traversal (using adjacency matrix):");
        g.DFS(0);

        System.out.println("\nBFS traversal (using adjacency list):");
        g.BFS(0);
    }
}
